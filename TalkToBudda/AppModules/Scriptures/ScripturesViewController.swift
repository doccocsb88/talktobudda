//
//  ScripturesViewController.swift
//  TalkToBudda
//
//  Created by mac on 6/5/25.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import SnapKit

final class ScriptureViewController: UIViewController, ScriptureViewable {

    var presenter: ScripturePresentable?
    private var scriptures: [ScriptureEntity] = []

    private let searchBar = UISearchBar()
    private let tableView = UITableView()
    private let navView = UIView()
    private let titleLabel = UILabel()
    
    // Empty state view
    private let emptyView = UIView()
    private let emptyImageView = UIImageView()
    private let emptyTitleLabel = UILabel()
    private let emptyMessageLabel = UILabel()
    
    // Keyboard handling properties
    private var keyboardHeight: CGFloat = 0
    private var isKeyboardVisible: Bool = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationController?.setNavigationBarHidden(true, animated: false)
        setupUI()
        setupKeyboardObservers()
        presenter?.viewDidLoad()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        removeKeyboardObservers()
    }

    private func setupUI() {
        view.backgroundColor = .colorFDF6ED

        [navView, searchBar, tableView, emptyView].forEach({view.addSubview($0)})
        navView.snp.makeConstraints { make in
            make.left.right.equalToSuperview()
            make.height.equalTo(44)
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top)
        }
        navView.addSubview(titleLabel)
        titleLabel.snp.makeConstraints { make in
            make.center.equalToSuperview()
        }
        titleLabel.text = "Scriptures".capitalized
        titleLabel.font = FontFamily.PlayfairDisplay.bold.font(size: 24)
        titleLabel.textAlignment = .center
        titleLabel.textColor = UIColor(hexString: "#4B3621")

        searchBar.setBackgroundImage(UIImage(), for: .any, barMetrics: .default)
        searchBar.backgroundColor = .clear
        if let searchField = searchBar.value(forKey: "searchField") as? UITextField {
            searchField.backgroundColor = .clear
            searchField.backgroundColor = UIColor(hexString: "FEEABE")
            searchField.rounded(radius: 18)
        }
        
        searchBar.delegate = self
        searchBar.placeholder = "Search sutras or keywords..."
        searchBar.snp.makeConstraints {
            $0.top.equalTo(navView.snp.bottom).offset(8)
            $0.leading.trailing.equalToSuperview().inset(16)
            $0.height.equalTo(60)
        }

        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(ScriptureCell.self, forCellReuseIdentifier: "ScriptureCell")
        tableView.backgroundColor = .clear
        tableView.separatorStyle = .none
        
        // Add tap gesture to hide keyboard
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(hideKeyboard))
        tapGesture.cancelsTouchesInView = false
        tableView.addGestureRecognizer(tapGesture)
        
        tableView.snp.makeConstraints {
            $0.top.equalTo(searchBar.snp.bottom).offset(8)
            $0.leading.trailing.bottom.equalToSuperview()
        }
        
        setupEmptyView()
    }
    
    private func setupEmptyView() {
        emptyView.backgroundColor = .clear
        emptyView.isHidden = true
        
        [emptyImageView, emptyTitleLabel, emptyMessageLabel].forEach({emptyView.addSubview($0)})
        
        // Empty image setup
        emptyImageView.contentMode = .scaleAspectFit
        emptyImageView.image = UIImage(systemName: "doc.text.magnifyingglass")
        emptyImageView.tintColor = UIColor(hexString: "#4B3621").withAlphaComponent(0.6)
        
        // Empty title setup
        emptyTitleLabel.text = "No Results Found"
        emptyTitleLabel.font = FontFamily.PlayfairDisplay.bold.font(size: 20)
        emptyTitleLabel.textColor = UIColor(hexString: "#4B3621")
        emptyTitleLabel.textAlignment = .center
        
        // Empty message setup
        emptyMessageLabel.text = "Try searching with different keywords or browse all scriptures"
        emptyMessageLabel.font = FontFamily.PlayfairDisplay.regular.font(size: 16)
        emptyMessageLabel.textColor = UIColor(hexString: "#4B3621").withAlphaComponent(0.7)
        emptyMessageLabel.textAlignment = .center
        emptyMessageLabel.numberOfLines = 0
        
        // Constraints
        emptyView.snp.makeConstraints { make in
            make.top.equalTo(searchBar.snp.bottom).offset(8)
            make.leading.trailing.bottom.equalToSuperview()
        }
        
        emptyImageView.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(view.hasTopNorth ? -60 : -40)
            make.width.height.equalTo(80)
        }
        
        emptyTitleLabel.snp.makeConstraints { make in
            make.top.equalTo(emptyImageView.snp.bottom).offset(20)
            make.leading.trailing.equalToSuperview().inset(40)
        }
        
        emptyMessageLabel.snp.makeConstraints { make in
            make.top.equalTo(emptyTitleLabel.snp.bottom).offset(12)
            make.leading.trailing.equalToSuperview().inset(40)
        }
        
        // Add tap gesture to hide keyboard
        let emptyTapGesture = UITapGestureRecognizer(target: self, action: #selector(hideKeyboard))
        emptyView.addGestureRecognizer(emptyTapGesture)
    }

    func displayScriptures(_ scriptures: [ScriptureEntity]) {
        self.scriptures = scriptures
        tableView.reloadData()
        
        // Show/hide empty view based on results
        let hasResults = !scriptures.isEmpty
        tableView.isHidden = !hasResults
        emptyView.isHidden = hasResults
    }
    
    // MARK: - Keyboard Handling
    
    @objc private func hideKeyboard() {
        view.endEditing(true)
    }
    
    private func setupKeyboardObservers() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillShow),
            name: UIResponder.keyboardWillShowNotification,
            object: nil
        )
        
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillHide),
            name: UIResponder.keyboardWillHideNotification,
            object: nil
        )
    }
    
    private func removeKeyboardObservers() {
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc private func keyboardWillShow(_ notification: Notification) {
        guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        let keyboardHeight = keyboardFrame.cgRectValue.height
        
        // Only adjust if keyboard is not already visible
        if !isKeyboardVisible {
            self.keyboardHeight = keyboardHeight
            
            // Adjust tableView and emptyView bottom constraints to account for keyboard
            tableView.snp.updateConstraints { make in
                make.bottom.equalToSuperview().inset(keyboardHeight)
            }
            
            emptyView.snp.updateConstraints { make in
                make.bottom.equalToSuperview().inset(keyboardHeight)
            }
            
            isKeyboardVisible = true
            
            UIView.animate(withDuration: 0.3) {
                self.view.layoutIfNeeded()
            }
        }
    }
    
    @objc private func keyboardWillHide(_ notification: Notification) {
        // Only restore if keyboard was visible
        if isKeyboardVisible {
            // Restore original bottom constraints
            tableView.snp.updateConstraints { make in
                make.bottom.equalToSuperview()
            }
            
            emptyView.snp.updateConstraints { make in
                make.bottom.equalToSuperview()
            }
            
            isKeyboardVisible = false
            
            UIView.animate(withDuration: 0.3) {
                self.view.layoutIfNeeded()
            }
        }
    }
}

extension ScriptureViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        scriptures.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "ScriptureCell", for: indexPath) as? ScriptureCell else {
            return UITableViewCell()
        }
        cell.configure(with: scriptures[indexPath.row])
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter?.didSelectScripture(scriptures[indexPath.row])
    }
}

extension ScriptureViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        presenter?.search(keyword: searchText)
    }
}
