//
//  ChatViewController.swift
//  TalkToBudda
//
//  Created by mac on 5/5/25.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import SnapKit

class ChatViewController: UIViewController, ChatViewable {
    var presenter: ChatPresentable?
    
    private var messages: [ChatMessage] = []
    private let tableView = UITableView()
    private let inputBar = InputBarView()
    private var selectedCharacter: CharacterType?
    private lazy var navView: UIView = {
        let view = UIView()
        
        return view
    }()
    
    private lazy var settingButton: UIButton = {
        let button = UIButton()
        button.setImage(Asset.Assets.icHomeSetting.image.withRenderingMode(.alwaysTemplate), for: .normal)
        button.tintColor = .color7D5A4F
        button.addTarget(self, action: #selector(tappedSettingButton(_:)), for: .touchUpInside)
        return button
    }()
    
    private lazy var characterButton: UIButton = {
        let button = UIButton()
        button.isHidden = true
        button.setTitle("Choose Guide", for: .normal)
        button.setTitleColor(.color4B3621, for: .normal)
        button.titleLabel?.font = FontFamily.FiraMono.medium.font(size: 14)
        button.backgroundColor = UIColor(hexString: "#F5F0E8")
        button.layer.cornerRadius = 15
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor(hexString: "#D4C4B0").cgColor
        button.addTarget(self, action: #selector(tappedCharacterButton(_:)), for: .touchUpInside)
        return button
    }()
    
    private lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.text = "Journey of Inner Peace"
        label.font = FontFamily.PlayfairDisplay.bold.font(size: 24)
        label.textAlignment = .center
        label.textColor = UIColor(hexString: "#4B3621")

        return label
    }()
    
    private var isLoading: Bool = false {
        didSet {
            inputBar.uploadLoadingState(isLoading)
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationController?.setNavigationBarHidden(true, animated: false)
        setupUI()
        setupKeyboardObservers()
        presenter?.viewDidLoad()
    }
    
    deinit {
        removeKeyboardObservers()
    }
    
    private func setupUI() {
        view.backgroundColor = .colorFDF6ED
        view.addSubview(navView)
        view.addSubview(tableView)
        view.addSubview(inputBar)

        navView.addSubview(settingButton)
        navView.addSubview(characterButton)
        navView.addSubview(titleLabel)
        
        tableView.register(ChatMessageCell.self, forCellReuseIdentifier: "ChatMessageCell")
        tableView.register(BuddaChatMessageCell.self, forCellReuseIdentifier: "BuddaChatMessageCell")
        tableView.register(ChatLoadingTVC.self, forCellReuseIdentifier: "ChatLoadingTVC")

        
        tableView.dataSource = self
        tableView.separatorStyle = .none
        tableView.backgroundColor = .clear

        inputBar.onSend = { [weak self] text in
            self?.presenter?.userDidSendMessage(text)
        }
        
        // Add tap gesture to dismiss keyboard only when tapping on tableView
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        tapGesture.cancelsTouchesInView = false
        tableView.addGestureRecognizer(tapGesture)

        navView.snp.makeConstraints { make in
            make.left.right.equalToSuperview()
            make.height.equalTo(44)
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top)
        }
        
        tableView.snp.makeConstraints { make in
            make.left.right.equalToSuperview()
            make.top.equalTo(navView.snp.bottom)
            make.bottom.equalTo(inputBar.snp.top).offset(-20)
        }

        inputBar.snp.makeConstraints { make in
            make.left.right.equalToSuperview().inset(12)
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom).offset(-8)
            make.height.equalTo(50)
        }
        
        settingButton.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.width.height.equalTo(44)
            make.right.equalToSuperview().inset(8)
        }
        
        characterButton.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.right.equalTo(settingButton.snp.left).offset(-8)
            make.height.equalTo(30)
            make.width.equalTo(100)
        }
        
        titleLabel.snp.makeConstraints { make in
            make.center.equalToSuperview()
        }
    }

    @objc private func didTapTag(_ sender: UIButton) {
        if let text = sender.titleLabel?.text {
            presenter?.userDidSendMessage(text)
        }
    }

    // MARK: - ChatViewable
    func displayMessages(_ messages: [ChatMessage]) {
        self.messages = messages
        tableView.reloadData()
        scrollToBottom()
    }

    func appendMessage(_ message: ChatMessage) {
        messages.append(message)
        isLoading = message.sender == .user
        tableView.reloadData()

        scrollToBottom()
    }

    func showNav() {
       
        let backButton = UIButton()
        backButton.setImage(Asset.Assets.icBack.image.withRenderingMode(.alwaysTemplate), for: .normal)
        backButton.imageView?.contentMode = .scaleAspectFit
        backButton.tintColor = .color4B3621
        backButton.addTarget(self, action: #selector(tappedBackButton(_:)), for: .touchUpInside)
        navView.addSubview(backButton)
        backButton.snp.makeConstraints { make in
            make.left.equalToSuperview().inset(8)
            make.width.height.equalTo(44)
            make.centerY.equalToSuperview()
        }
    }
    
    func toogleLoading(_ loading: Bool) {
        isLoading = loading
    }
    
    func updateCharacterSelection(_ character: CharacterType?) {
        if let character = character {
            selectedCharacter = character
            characterButton.setTitle(character.displayName, for: .normal)
            titleLabel.text = "Conversation with \(character.displayName)"
        }
    }

    
    private func scrollToBottom() {
        guard messages.count > 0 else { return }
        if isLoading {
            let indexPath = IndexPath(row: 0, section: 1)
            tableView.scrollToRow(at: indexPath, at: .bottom, animated: true)

        } else {
            let indexPath = IndexPath(row: messages.count - 1, section: 0)
            tableView.scrollToRow(at: indexPath, at: .bottom, animated: true)
        }
    }
    
    
    @objc func tappedBackButton(_ sender: UIButton) {
        dismiss(animated: true)
    }
    
    @objc func tappedSettingButton(_ sender: UIButton) {
        let settingVC = SettingsViewController()
        settingVC.modalPresentationStyle = .fullScreen
        present(settingVC, animated: true)
    }
    
    @objc func tappedCharacterButton(_ sender: UIButton) {
        let characterSelectionVC = CharacterSelectionViewController()
        characterSelectionVC.delegate = self
        characterSelectionVC.modalPresentationStyle = .fullScreen
        present(characterSelectionVC, animated: true)
    }
    
    @objc private func dismissKeyboard() {
        view.endEditing(true)
    }
    
    // MARK: - Keyboard Handling
    private func setupKeyboardObservers() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillShow(_:)),
            name: UIResponder.keyboardWillShowNotification,
            object: nil
        )
        
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillHide(_:)),
            name: UIResponder.keyboardWillHideNotification,
            object: nil
        )
    }
    
    private func removeKeyboardObservers() {
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc private func keyboardWillShow(_ notification: Notification) {
        guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,
              let animationDuration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {
            return
        }
        
        let keyboardHeight = keyboardFrame.height
        let safeAreaBottom = view.safeAreaInsets.bottom
        
        UIView.animate(withDuration: animationDuration) {
            self.inputBar.snp.updateConstraints { make in
                make.bottom.equalTo(self.view.safeAreaLayoutGuide.snp.bottom).offset(-keyboardHeight + safeAreaBottom - 8)
            }
            self.view.layoutIfNeeded()
        }
        
        // Scroll to bottom to show the latest message
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.scrollToBottom()
        }
    }
    
    @objc private func keyboardWillHide(_ notification: Notification) {
        guard let animationDuration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {
            return
        }
        
        UIView.animate(withDuration: animationDuration) {
            self.inputBar.snp.updateConstraints { make in
                make.bottom.equalTo(self.view.safeAreaLayoutGuide.snp.bottom).offset(-8)
            }
            self.view.layoutIfNeeded()
        }
    }
}

extension ChatViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            return messages.count
        } else if section == 1 {
            return isLoading ? 1 : 0
        }
        
        return 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.section == 0 {
            let msg = messages[indexPath.row]
            if msg.sender == .bot {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: "BuddaChatMessageCell", for: indexPath) as? BuddaChatMessageCell else {
                    return UITableViewCell()
                }
                cell.configure(message: msg.text, isFromUser: msg.sender == .user)
                return cell
            } else {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: "ChatMessageCell", for: indexPath) as? ChatMessageCell else {
                    return UITableViewCell()
                }
                cell.configure(message: msg.text, isFromUser: msg.sender == .user)
                return cell
            }
        } else if indexPath.section == 1 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "ChatLoadingTVC", for: indexPath) as? ChatLoadingTVC else {
                return UITableViewCell()
            }
            cell.configure(message: "Loading....", isFromUser: false)
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
}

extension ChatViewController: CharacterSelectionDelegate {
    func didSelectCharacter(_ character: CharacterType) {
        selectedCharacter = character
        characterButton.setTitle(character.displayName, for: .normal)
        titleLabel.text = "Conversation with \(character.displayName)"
        
        // Update conversation with selected character
        if let presenter = presenter as? ChatPresenter {
            presenter.updateSelectedCharacter(character)
        }
    }
}
