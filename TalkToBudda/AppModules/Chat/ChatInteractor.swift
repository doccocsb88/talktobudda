//
//  ChatInteractor.swift
//  TalkToBudda
//
//  Created by mac on 5/5/25.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

class ChatInteractor: ChatInteractable {
    weak var presenter: ChatPresenter?
    weak var view: ChatViewable?

    let networkService = NetworkService()
   

    private var messages: [ChatMessage] = []
    private let oldConversation: ConversationCodable?
    private let conversation: ConversationCodable
    private var selectedCharacter: CharacterType?
    required init(conversation: ConversationCodable? = nil) {
        self.oldConversation = conversation
        self.conversation = conversation ?? ChatDataManager.shared.createConversation(title: "", character: nil)
        self.selectedCharacter = conversation?.selectedCharacter
    }
    
    func fetchInitialMessages() {
        if let _conversation = oldConversation {
            _conversation.messages.forEach { chat in
                messages.append(chat)
            }
            view?.showNav()
        } else {
            guard let url = Bundle.main.url(forResource: "TalkToBuddha_Questions", withExtension: "json"), let data = try? Data(contentsOf: url) else { return }
            
            if let samleQuestions = try? JSONDecoder().decode([[String: String]].self, from: data) {
                
                while messages.count < 2 {
                    let dict = samleQuestions.randomElement() ?? [:]
                    
                    if let question = dict["question"], !question.isEmpty, let answer = dict["answer"], !answer.isEmpty {
                        let chat1 = ChatMessage(text: question, sender: .user)
                        let chat2 = ChatMessage(text: answer, sender: .bot)
                        messages.append(chat1)
                        messages.append(chat2)
                    }

                }
            }
        }
      
        if messages.isEmpty {
            let chat = ChatMessage(text: "Welcome, dear seeker of peace. May your heart find clarity and your mind discover stillness as we journey together through the path of understanding.", sender: .bot)
            messages.append(chat)
        }
    
        view?.displayMessages(messages)
    }

    func sendMessage(_ text: String) {

        let userMessage = ChatMessage(text: text, sender: .user)
        messages.append(userMessage)
        view?.appendMessage(userMessage)
        
        
        let character = selectedCharacter ?? .buddha
        networkService.sendQuestion(text, conversation: conversation, characterType: character) {[weak self] result in
            guard let self else { return }
            switch result {
            case .success(let buddhistResponse):                
                let botMessage = ChatMessage(text: buddhistResponse.answer, sender: .bot)
                ChatDataManager.shared.addMessage(chat: userMessage, to: self.conversation)
                ChatDataManager.shared.addMessage(chat: botMessage, to: self.conversation)
                ConditionServices.shared.increasetChat()

                self.messages.append(botMessage)
                DispatchQueue.main.async {
                    self.view?.appendMessage(botMessage)
                }

            case .failure(let error):
                print("L·ªói x·∫£y ra: \(error.localizedDescription)")
                let botMessage = ChatMessage(text: "Sorry, Something went wrong.\nPlease try again later.", sender: .bot)
                self.messages.append(botMessage)
                DispatchQueue.main.async {
                    self.view?.appendMessage(botMessage)
                }
            }
        }
    }
    
    func updateSelectedCharacter(_ character: CharacterType) {
        selectedCharacter = character
        ChatDataManager.shared.updateConversationCharacter(conversationId: conversation.id, character: character)
        
        // Update the conversation object
        var updatedConversation = conversation
        updatedConversation.selectedCharacter = character
        
        // Show character-specific greeting if this is a new conversation
        if messages.count <= 1 {
            let greetingMessage = ChatMessage(text: character.greetingMessage, sender: .bot)
            messages.append(greetingMessage)
            ChatDataManager.shared.addMessage(chat: greetingMessage, to: conversation)
            view?.appendMessage(greetingMessage)
        }
    }
}
