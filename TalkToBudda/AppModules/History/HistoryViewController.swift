//
//  HistoryViewController.swift
//  TalkToBudda
//
//  Created by mac on 6/5/25.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class HistoryViewController: UIViewController {
    
    // MARK: - Public properties -
    
    var presenter: HistoryPresenterInterface!
    
    // MARK: - Private properties -
    
    private let disposeBag = DisposeBag()
    private let tableView = UITableView()
    private var conversations: [ConversationCodable] = []
    private lazy var backgroundImageView: UIImageView = {
        let imageView = UIImageView(image: Asset.Assets.buddaConversation.image)
        imageView.contentMode = .scaleAspectFill
        imageView.alpha = 0.3
        return imageView
    }()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationController?.setNavigationBarHidden(true, animated: false)
        setupView()
        setupTableView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        loadConversations()
    }
    
    private func setupTableView() {
        let titleLabel = UILabel()
        titleLabel.text = "History"
        titleLabel.font = FontFamily.PlayfairDisplay.bold.font(size: 24)
        titleLabel.textAlignment = .center
        titleLabel.textColor = UIColor(hexString: "#4B3621")
        
        titleLabel.textAlignment = .center
        
        view.addSubview(backgroundImageView)
        view.addSubview(tableView)
        view.addSubview(titleLabel)
        titleLabel.snp.makeConstraints {
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(10)
            $0.centerX.equalToSuperview()
        }
        
        backgroundImageView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        tableView.snp.makeConstraints { make in
            make.left.right.bottom.equalToSuperview()
            make.top.equalTo(titleLabel.snp.bottom).offset(20)
        }
        
        tableView.backgroundColor = .clear
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.register(ConversationCell.self, forCellReuseIdentifier: ConversationCell.reuseId)
        tableView.register(ConversationEmptyTVC.self, forCellReuseIdentifier: "ConversationEmptyTVC")
    }
    
    private func loadConversations() {
        let dataManager = ChatDataManager()
        conversations = dataManager.fetchAllConversations().filter({!$0.messages.isEmpty})
        tableView.reloadData()
    }
    
    func presentChatVC(conversation: ConversationCodable? = nil) {
        let vc = ChatRouter.createModule(conversation: conversation )
        vc.modalPresentationStyle = .fullScreen
        present(vc, animated: true)
    }
    
    func presentEmptyChatVC() {
        let conversation = ChatDataManager.shared.createConversation(title: "", character: nil)
        presentChatVC(conversation: conversation)
    }
}

extension HistoryViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.section == 0 {
            return 400
        } else if indexPath.section == 1 {
            return 140
        } else {
            return 0
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            return conversations.count == 0 ? 1 : 0
        }
        
        return conversations.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.section == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "ConversationEmptyTVC", for: indexPath) as? ConversationEmptyTVC else {
                return UITableViewCell()
            }
            
            cell.tappedStartHandler = {[weak self] in
                self?.presentEmptyChatVC()
            }
            
            return cell
        } else if indexPath.section == 1 {
            let conversation = conversations[indexPath.row]
            guard let cell = tableView.dequeueReusableCell(withIdentifier: ConversationCell.reuseId, for: indexPath) as? ConversationCell else {
                return UITableViewCell()
            }
            
            cell.configure(with: conversation, index: indexPath.row)
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // Navigate to chat screen
        guard indexPath.section == 1 else { return }
        tableView.deselectRow(at: indexPath, animated: true)
        
        let conversation = conversations[indexPath.row]
        presentChatVC(conversation: conversation)
    }
    
    
    // MARK: - Swipe to Delete
//    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
//        // Ch·ªâ cho ph√©p swipe ·ªü section 1
//        guard indexPath.section == 1 else { return nil }
//        
//        // T·∫°o h√†nh ƒë·ªông Delete
//        let deleteAction = UIContextualAction(style: .destructive, title: "Delete") { [weak self] (_, _, completionHandler) in
//            guard let self = self else { return }
//            
//            // Xo√° ph·∫ßn t·ª≠ trong m·∫£ng d·ªØ li·ªáu
//            self.conversations.remove(at: indexPath.row)
//            
//            // C·∫≠p nh·∫≠t l·∫°i TableView
//            if self.conversations.isEmpty {
//                tableView.reloadData()
//            } else {
//                tableView.deleteRows(at: [indexPath], with: .automatic)
//            }
//            
//            // G·ªçi callback ƒë·ªÉ ho√†n th√†nh h√†nh ƒë·ªông
//            completionHandler(true)
//        }
//        
//        deleteAction.backgroundColor = .systemRed
//        
//        // C·∫•u h√¨nh swipe
//        let configuration = UISwipeActionsConfiguration(actions: [deleteAction])
//        configuration.performsFirstActionWithFullSwipe = true
//        
//        return configuration
//    }
}

// MARK: - Extensions -

extension HistoryViewController: HistoryViewInterface {
}

private extension HistoryViewController {
    
    func setupView() {
        view.backgroundColor = .colorFDF6ED
        let output = History.ViewOutput()
        
        let input = presenter.configure(with: output)
    }
    
}

