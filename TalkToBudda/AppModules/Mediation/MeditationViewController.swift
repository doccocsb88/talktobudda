//
//  MeditationViewController.swift
//  TalkToBudda
//
//  Created by mac on 6/5/25.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift


final class MeditationMoodViewController: UIViewController, MeditationMoodViewable {
    var presenter: MeditationMoodPresentable?
    
    private let moodQuestionLabel: UILabel = {
        let label = UILabel()
        label.text = "How do you feel today?"
        label.textAlignment = .center
        label.font = FontFamily.PlayfairDisplay.italic.font(size: 16)
        return label
    }()
    
    private var moodButtons: [MoodView] = []
    private let moodStackView = UIStackView()
    
    private let startButton: UIButton = {
        let button = UIButton()
        button.setTitle("Start Meditation", for: .normal)
        button.setTitleColor(.color4B3621, for: .normal)
        button.titleLabel?.font = FontFamily.PlayfairDisplay.medium.font(size: 16)
        button.backgroundColor = UIColor(hexString: "#EFD3A3")
        button.rounded(radius: 16, borderWidth: 1.5, borderColor: .color4B3621)
        button.addTarget(self, action: #selector(startMeditationTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var titleLabel: UILabel = {
        let titleLabel = UILabel()
        titleLabel.text = "Meditation"
        titleLabel.font = FontFamily.PlayfairDisplay.bold.font(size: 24)
        titleLabel.textAlignment = .center
        titleLabel.textColor = UIColor(hexString: "#4B3621")
        
        titleLabel.textAlignment = .center
        
        return titleLabel
    }()
    
    private lazy var mediationTableView: UITableView = {
        let tableView = UITableView()
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(MeditationTableViewCell.self, forCellReuseIdentifier: "MeditationCell")
        tableView.backgroundColor = .clear 
        return tableView
    }()
    
    private let navView = UIView()
    
    private var selectedMood: Mood?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        setupUI()
        presenter?.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    
    func showUserInfo(name: String) {
    }
    
    func updateSelectedMood(_ mood: Mood) {
        selectedMood = mood
        for (i, btn) in moodButtons.enumerated() {
            btn.alpha = (Mood.allCases[i] == mood) ? 1.0 : 0.3
        }
    }
    
    private func setupUI() {
        // Header title
        navigationController?.setNavigationBarHidden(true, animated: false)
        view.backgroundColor = .colorFDF6ED
        
        [navView, moodQuestionLabel, moodQuestionLabel, moodStackView, startButton, mediationTableView].forEach({view.addSubview($0)})

        
        navView.addSubview(titleLabel)
        titleLabel.snp.makeConstraints {
            $0.center.equalToSuperview()
        }
        
        navView.snp.makeConstraints { make in
            make.left.right.equalToSuperview()
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top)
            make.height.equalTo(44)
        }
        
        // Mood question
        moodQuestionLabel.snp.makeConstraints {
            $0.top.equalTo(navView.snp.bottom).offset(20)
            $0.centerX.equalToSuperview()
        }
        
        // Mood buttons
        moodStackView.axis = .horizontal
        moodStackView.distribution = .fillEqually
        moodStackView.alignment = .center
        moodStackView.spacing = 16

        moodStackView.snp.makeConstraints {
            $0.top.equalTo(moodQuestionLabel.snp.bottom).offset(0)
            $0.left.right.equalToSuperview().inset(30)
            $0.height.equalTo(100)
        }
        
        Mood.allCases.enumerated().forEach { index, mood in
            
            let moodView = MoodView(mood: mood)
            moodView.onSelectMood = {[weak self] selectedMode in
                self?.presenter?.didSelectMood(selectedMode)
            }
            
            moodButtons.append(moodView)
            moodStackView.addArrangedSubview(moodView)
            
        }
        
        // Start button

        startButton.snp.makeConstraints {
            $0.top.equalTo(moodStackView.snp.bottom).offset(30)
            $0.left.right.equalToSuperview().inset(30)
            $0.height.equalTo(50)
        }
        
        mediationTableView.snp.makeConstraints { make in
            make.left.right.equalToSuperview()
            make.top.equalTo(startButton.snp.bottom).offset(8)
            make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom)
        }
    }
    
    @objc private func moodTapped(_ sender: UIButton) {
        let mood = Mood.allCases[sender.tag]
        presenter?.didSelectMood(mood)
    }
    
    @objc private func startMeditationTapped() {
        presenter?.didTapStartMeditation()
    }
    
    func reloadTableView() {
        mediationTableView.reloadData()
    }
    
}

extension MeditationMoodViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard  let meditation = presenter?.getMediation(at: indexPath) else { return }
        let vc = MeditationGuideVC(meditation: meditation)
        vc.modalPresentationStyle = .fullScreen
        present(vc, animated: true)
    }
}

extension MeditationMoodViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 10
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard  let meditation = presenter?.getMediation(at: indexPath),
               let cell = tableView.dequeueReusableCell(withIdentifier: "MeditationCell", for: indexPath) as? MeditationTableViewCell else {
            return UITableViewCell()
        }
        
        cell.configure(with: meditation)
        return cell
    }
    
}
